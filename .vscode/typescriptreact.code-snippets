{
    "Unit test with props": {
        "prefix": "t-unit-props",
        "description": "Unit test with props",
        "body": [
            "import { PropsWithTestWrapper, TestWrapper } from '@music-room/data-access';",
            "import \"@testing-library/jest-dom\";",
            "import \"@testing-library/jest-dom/extend-expect\";",
            "import { render, screen } from \"@testing-library/react\";",
            "import { ComponentProps } from 'react';",
            "import { ${TM_FILENAME/.test.tsx//} } from \"./${TM_FILENAME/.test.tsx//}\";",
            "",
            "type Props = ComponentProps<typeof ${TM_FILENAME/.test.tsx//}>;",
            "",
            "const defaultProps: Props = {",
            "",
            "};",
            "",
            "const renderComponent = ({ wrapperProps, ...props }: PropsWithTestWrapper<Partial<Props>> = {}) => {",
            "  return render(",
            "    <TestWrapper {...wrapperProps}>",
            "      <${TM_FILENAME/.test.tsx//} {...defaultProps} {...props} />",
            "    </TestWrapper>",
            "  );",
            "}",
            "",
            "describe(\"<${TM_FILENAME/.test.tsx//} />\", () => {",
            "  it(\"should render\", async () => {",
            "    expect.hasAssertions();",
            "",
            "    renderComponent();",
            "",
            "    expect(await screen.findByText('${TM_FILENAME/.test.tsx//}')).toBeInTheDocument();",
            "  });",
            "});",
        ]
    },
    "Unit test no props": {
        "prefix": "t-unit-no-props",
        "description": "Unit test no props",
        "body": [
            "import { PropsWithTestWrapper, TestWrapper } from '@music-room/data-access';",
            "import \"@testing-library/jest-dom\";",
            "import \"@testing-library/jest-dom/extend-expect\";",
            "import { render, screen } from \"@testing-library/react\";",
            "import { ${TM_FILENAME/.test.tsx//} } from \"./${TM_FILENAME/.test.tsx//}\";",
            "",
            "const renderComponent = ({ wrapperProps }: PropsWithTestWrapper = {}) => {",
            "  return render(",
            "    <TestWrapper {...wrapperProps}>",
            "      <${TM_FILENAME/.test.tsx//} />",
            "    </TestWrapper>",
            "  );",
            "}",
            "",
            "describe(\"<${TM_FILENAME/.test.tsx//} />\", () => {",
            "  it(\"should render\", async () => {",
            "    expect.hasAssertions();",
            "",
            "    renderComponent();",
            "",
            "    expect(await screen.findByText('${TM_FILENAME/.test.tsx//}')).toBeInTheDocument();",
            "  });",
            "});",
        ]
    },
    "Integration test": {
        "prefix": "t-integration",
        "body": [
            "import { PropsWithTestWrapper, TestWrapper } from '@music-room/data-access';",
            "import \"@testing-library/jest-dom\";",
            "import \"@testing-library/jest-dom/extend-expect\";",
            "import { render, screen, waitFor } from \"@testing-library/react\";",
            "import userEvent from \"@testing-library/user-event\";",
            "import { ComponentProps } from 'react';",
            "import { ${TM_FILENAME/.test.tsx//} } from \"./${TM_FILENAME/.test.tsx//}\";",
            "",
            "type Props = ComponentProps<typeof ${TM_FILENAME/.test.tsx//}>;",
            "",
            "const View: Props['View'] = () => (",
            "  <div>",
            "    <button>Click</button>",
            "    <p>${TM_FILENAME/.test.tsx//}</p>",
            "  </div>",
            ");",
            "",
            "const defaultProps: Props = {",
            "  View,",
            "};",
            "",
            "const renderComponent = ({wrapperProps, ...props}: PropsWithTestWrapper<Partial<Props>> = {}) => {",
            "  return render(",
            "    <TestWrapper {...wrapperProps}>",
            "      <${TM_FILENAME/.test.tsx//} {...defaultProps} {...props} />",
            "    </TestWrapper>",
            "  );",
            "};",
            "",
            "describe(\"<${TM_FILENAME/.test.tsx//} />\", () => {",
            "  it(\"should render\", async () => {",
            "    expect.hasAssertions();",
            "",
            "    renderComponent();",
            "",
            "    expect(await screen.findByText('${TM_FILENAME/.test.tsx//}')).toBeInTheDocument();",
            "  });",
            "",
            "  it(\"should render default\", async () => {",
            "    expect.hasAssertions();",
            "",
            "    renderComponent({ View: undefined });",
            "",
            "    expect(await screen.findByText('${TM_FILENAME/.test.tsx//}')).toBeInTheDocument();",
            "  });",
            "});",
        ]
    },
    "Storybook component no props": {
        "description": "Storybook component",
        "prefix": "t-storybook-no-props",
        "body": [
            "import { ComponentMeta, ComponentStory } from \"@storybook/react\";",
            "import { PropsWithTestWrapper, TestWrapper } from \"renderer/tests/Wrapper\";",
            "import { ${TM_FILENAME/.stories.tsx//} } from \"./${TM_FILENAME/.stories.tsx//}\";",
            "",
            "export default {",
            "  title: \"${TM_DIRECTORY/.*modules.//}\",",
            "  component: ${TM_FILENAME/.stories.tsx//},",
            "} as ComponentMeta<typeof ${TM_FILENAME/.stories.tsx//}>;",
            "",
            "const ${TM_FILENAME/.stories.tsx//}Story = ({ wrapperProps }: PropsWithTestWrapper) => {",
            "  return (",
            "    <TestWrapper {...wrapperProps}>",
            "      <${TM_FILENAME/.stories.tsx//} />",
            "    </TestWrapper>",
            "  );",
            "};",
            "",
            "const Template: ComponentStory<typeof ${TM_FILENAME/.stories.tsx//}Story> = ${TM_FILENAME/.stories.tsx//}Story;",
            "",
            "export const Playground = Template.bind({});",
            "Playground.args = { wrapperProps: {} };",
        ]
    },
    "Storybook component props": {
        "description": "Storybook component",
        "prefix": "t-storybook-props",
        "body": [
            "import { ComponentMeta, ComponentStory } from \"@storybook/react\";",
            "import { ComponentProps } from \"react\";",
            "import { PropsWithTestWrapper, TestWrapper } from \"renderer/tests/Wrapper\";",
            "import { ${TM_FILENAME/.stories.tsx//} } from \"./${TM_FILENAME/.stories.tsx//}\";",
            "",
            "export default {",
            "  title: \"${TM_DIRECTORY/.*modules.//}\",",
            "  component: ${TM_FILENAME/.stories.tsx//},",
            "} as ComponentMeta<typeof ${TM_FILENAME/.stories.tsx//}>;",
            "",
            "type Props = ComponentProps<typeof ${TM_FILENAME/.stories.tsx//}>;",
            "",
            "const ${TM_FILENAME/.stories.tsx//}Story = ({ wrapperProps, ...props }: PropsWithTestWrapper<Props>) => {",
            "  return (",
            "    <TestWrapper {...wrapperProps}>",
            "      <${TM_FILENAME/.stories.tsx//} {...props} />",
            "    </TestWrapper>",
            "  );",
            "};",
            "",
            "const Template: ComponentStory<typeof ${TM_FILENAME/.stories.tsx//}Story> = ${TM_FILENAME/.stories.tsx//}Story;",
            "",
            "export const Playground = Template.bind({});",
            "Playground.args = { wrapperProps: {} };",
        ]
    },
    "Molecule": {
        "description": "Molecule",
        "prefix": "t-molecule",
        "body": [
            "import { ReactElement } from 'react';",
            "import $TM_FILENAME_BASEView from \"../$TM_FILENAME_BASEView/$TM_FILENAME_BASEView\";",
            "",
            "type Props = {",
            "  View?: typeof $TM_FILENAME_BASEView;",
            "};",
            "",
            "export const $TM_FILENAME_BASE = ({",
            "  View = $TM_FILENAME_BASEView,",
            "}: Props): ReactElement => {",
            "  return <View data=\"hello\"/>;",
            "};",
        ]
    },
    "View": {
        "description": "View",
        "prefix": "t-view-props",
        "body": [
            "import { ReactElement } from \"react\";",
            "import { useTranslation } from \"react-i18next\";",
            "",
            "type Props = {",
            "  data?: string;",
            "};",
            "",
            "export const $TM_FILENAME_BASE = ({ data }: Props): ReactElement => {",
            "  const { t } = useTranslation(\"common\");",
            "  return (",
            "    <div>",
            "      <p>$TM_FILENAME_BASE</p>",
            "      <div>{data}</div>",
            "   </div>",
            "  );",
            "};",
            ""
        ],
    },
    "View no props": {
        "description": "View no props",
        "prefix": "t-view-no-props",
        "body": [
            "import { ReactElement } from \"react\";",
            "import { useTranslation } from \"react-i18next\";",
            "",
            "export const $TM_FILENAME_BASE = (): ReactElement => {",
            "  const { t } = useTranslation(\"common\");",
            "  return (",
            "    <div>",
            "      <p>$TM_FILENAME_BASE</p>",
            "   </div>",
            "  );",
            "};",
            ""
        ]
    }
}