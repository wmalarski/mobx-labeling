{
    "Unit test with props": {
        "prefix": "t-unit-props",
        "description": "Unit test with props",
        "body": [
            "import { PropsWithTestWrapper, TestWrapper } from '@music-room/data-access';",
            "import \"@testing-library/jest-dom\";",
            "import \"@testing-library/jest-dom/extend-expect\";",
            "import { render, screen } from \"@testing-library/react\";",
            "import { ComponentProps } from 'react';",
            "import { $0 } from \"./$0\";",
            "",
            "type Props = ComponentProps<typeof $0>;",
            "",
            "const defaultProps: Props = {",
            "",
            "};",
            "",
            "const renderComponent = ({ wrapperProps, ...props }: PropsWithTestWrapper<Partial<Props>> = {}) => {",
            "  return render(",
            "    <TestWrapper {...wrapperProps}>",
            "      <$0 {...defaultProps} {...props} />",
            "    </TestWrapper>",
            "  );",
            "}",
            "",
            "describe(\"<$0 />\", () => {",
            "  it(\"should render\", async () => {",
            "    expect.hasAssertions();",
            "",
            "    renderComponent();",
            "",
            "    expect(await screen.findByText('$0')).toBeInTheDocument();",
            "  });",
            "});",
        ]
    },
    "Unit test no props": {
        "prefix": "t-unit-no-props",
        "description": "Unit test no props",
        "body": [
            "import { PropsWithTestWrapper, TestWrapper } from '@music-room/data-access';",
            "import \"@testing-library/jest-dom\";",
            "import \"@testing-library/jest-dom/extend-expect\";",
            "import { render, screen } from \"@testing-library/react\";",
            "import { $0 } from \"./$0\";",
            "",
            "const renderComponent = ({ wrapperProps }: PropsWithTestWrapper = {}) => {",
            "  return render(",
            "    <TestWrapper {...wrapperProps}>",
            "      <$0 />",
            "    </TestWrapper>",
            "  );",
            "}",
            "",
            "describe(\"<$0 />\", () => {",
            "  it(\"should render\", async () => {",
            "    expect.hasAssertions();",
            "",
            "    renderComponent();",
            "",
            "    expect(await screen.findByText('$0')).toBeInTheDocument();",
            "  });",
            "});",
        ]
    },
    "Integration test": {
        "prefix": "t-integration",
        "body": [
            "import { PropsWithTestWrapper, TestWrapper } from '@music-room/data-access';",
            "import \"@testing-library/jest-dom\";",
            "import \"@testing-library/jest-dom/extend-expect\";",
            "import { render, screen, waitFor } from \"@testing-library/react\";",
            "import userEvent from \"@testing-library/user-event\";",
            "import { ComponentProps } from 'react';",
            "import $0 from \"./$0\";",
            "",
            "type Props = ComponentProps<typeof $0>;",
            "",
            "const View: Props['View'] = () => (",
            "  <div>",
            "    <button>Click</button>",
            "    <p>$0</p>",
            "  </div>",
            ");",
            "",
            "const defaultProps: Props = {",
            "  View,",
            "};",
            "",
            "const renderComponent = ({wrapperProps, ...props}: PropsWithTestWrapper<Partial<Props>> = {}) => {",
            "  return render(",
            "    <TestWrapper {...wrapperProps}>",
            "      <$0 {...defaultProps} {...props} />",
            "    </TestWrapper>",
            "  );",
            "};",
            "",
            "describe(\"<$0 />\", () => {",
            "  it(\"should render\", async () => {",
            "    expect.hasAssertions();",
            "",
            "    renderComponent();",
            "",
            "    expect(await screen.findByText('$0')).toBeInTheDocument();",
            "  });",
            "",
            "  it(\"should render default\", async () => {",
            "    expect.hasAssertions();",
            "",
            "    renderComponent({ View: undefined });",
            "",
            "    expect(await screen.findByText('$0')).toBeInTheDocument();",
            "  });",
            "});",
        ]
    },
    "Storybook component no props": {
        "description": "Storybook component",
        "prefix": "t-storybook-no-props",
        "body": [
            "import { PropsWithTestWrapper, TestWrapper } from '@music-room/data-access';",
            "import { ComponentMeta, ComponentStory } from \"@storybook/react\";",
            "import { handlers } from '../../tests/handlers';",
            "import { $0 } from \"./$0\";",
            "",
            "export default {",
            "  title: \"$1/$0\",",
            "  component: $0,",
            "} as ComponentMeta<typeof $0>;",
            "",
            "const $0Story = ({ wrapperProps }: PropsWithTestWrapper) => {",
            "  return (",
            "    <TestWrapper {...wrapperProps}>",
            "      <$0 />",
            "    </TestWrapper>",
            "  );",
            "};",
            "",
            "const Template: ComponentStory<typeof $0Story> = $0Story;",
            "",
            "export const Playground = Template.bind({});",
            "Playground.parameters = { msw: { handlers } };",
            "Playground.args = { wrapperProps: {} };",
        ]
    },
    "Storybook component props": {
        "description": "Storybook component",
        "prefix": "t-storybook-props",
        "body": [
            "import { PropsWithTestWrapper, TestWrapper } from '@music-room/data-access';",
            "import { ComponentMeta, ComponentStory } from \"@storybook/react\";",
            "import { ComponentProps } from 'react';",
            "import { handlers } from '../../tests/handlers';",
            "import { $0 } from \"./$0\";",
            "",
            "export default {",
            "  title: \"$1/$0\",",
            "  component: $0,",
            "} as ComponentMeta<typeof $0>;",
            "",
            "type Props = ComponentProps<typeof $0>;",
            "",
            "const $0Story = ({ wrapperProps, ...props }: PropsWithTestWrapper<Props>) => {",
            "  return (",
            "    <TestWrapper {...wrapperProps}>",
            "      <$0 {...props} />",
            "    </TestWrapper>",
            "  );",
            "};",
            "",
            "const Template: ComponentStory<typeof $0Story> = $0Story;",
            "",
            "export const Playground = Template.bind({});",
            "Playground.parameters = { msw: { handlers } };",
            "Playground.args = { wrapperProps: {} };",
        ]
    },
    "Molecule": {
        "description": "Molecule",
        "prefix": "t-molecule",
        "body": [
            "import { ReactElement } from 'react';",
            "import $0View from \"../$0View/$0View\";",
            "",
            "type Props = {",
            "  View?: typeof $0View;",
            "};",
            "",
            "export const $0 = ({",
            "  View = $0View,",
            "}: Props): ReactElement => {",
            "  return <View data=\"hello\"/>;",
            "};",
        ]
    },
    "View": {
        "description": "View",
        "prefix": "t-view-props",
        "body": [
            "import { ReactElement } from \"react\";",
            "",
            "type Props = {",
            "  data?: string;",
            "};",
            "",
            "export const $0 = ({ data }: Props): ReactElement => {",
            "  return (",
            "    <div>",
            "      <p>$0</p>",
            "      <div>{data}</div>",
            "   </div>",
            "  );",
            "};",
            ""
        ],
    },
    "View no props": {
        "description": "View no props",
        "prefix": "t-view-no-props",
        "body": [
            "import { ReactElement } from \"react\";",
            "",
            "export const $0 = (): ReactElement => {",
            "  return (",
            "    <div>",
            "      <p>$0</p>",
            "   </div>",
            "  );",
            "};",
            ""
        ]
    }
}